// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// TodoCreate defines model for Todo.Create.
type TodoCreate struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// TodoRead defines model for Todo.Read.
type TodoRead struct {
	Description string `json:"description"`
	Title       string `json:"title"`
	Uuid        Uuid   `json:"uuid"`
}

// TodoUpdate defines model for Todo.Update.
type TodoUpdate struct {
	Description string `json:"description"`
	Title       string `json:"title"`
}

// Uuid defines model for Uuid.
type Uuid = string

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = TodoCreate

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody = TodoUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetTodos
	// (GET /todos)
	ListTodos(ctx echo.Context) error
	// CreateTodo
	// (POST /todos)
	CreateTodo(ctx echo.Context) error
	// DeleteTodo
	// (DELETE /todos/{uuid})
	DeleteTodo(ctx echo.Context, uuid Uuid) error
	// GetTodo
	// (GET /todos/{uuid})
	GetTodo(ctx echo.Context, uuid Uuid) error
	// UpdateTodo
	// (PUT /todos/{uuid})
	UpdateTodo(ctx echo.Context, uuid Uuid) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListTodos converts echo context to params.
func (w *ServerInterfaceWrapper) ListTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTodos(ctx)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodo(ctx, uuid)
	return err
}

// GetTodo converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodo(ctx, uuid)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTodo(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.ListTodos)
	router.POST(baseURL+"/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todos/:uuid", wrapper.DeleteTodo)
	router.GET(baseURL+"/todos/:uuid", wrapper.GetTodo)
	router.PUT(baseURL+"/todos/:uuid", wrapper.UpdateTodo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVS2/cNhD+K8S0R1mSHyhcnZq4bWA0fSDwnuI9zEqzWgYSyZAjJwtD/73gw95oJddO",
	"20AXUvP+5hvOPdS6N1qRYgfVPbh6Rz2G441udH5lCZn81VhtyLKkIGzI1VYallr5K+8NQQWOrVQtjBmw",
	"5I4WJGMGlj4O0lID1fukts4e1PTmA9XsHYTo7wib/y92BsMgg7/vLW2hgu+KQ/FFqrxYeZ3jPIPhg+ds",
	"ksGTya9M8+2hez6XVaq5x89vSbW8g+r8hwx6qb68GmQmq6CC29vN+/LkRzzZru8vx9vbzcnj9WJ88vyl",
	"1emZN4NsVsCYgVRb7bOptWKs2R+pR9lBBXWHQyPLfEPIVtbnP7VekNe6hwwU9t7VVdDR4nXU8fUP1hvv",
	"mI2rioJJfUJrgtU4BaeCV0aKrbaCdyR8ixphrA44ZdDJmpQLuKdYv1/fzNxrQ8rpwdaUa9sWycgVXvfQ",
	"OojOX/11DRnckXUx/GleeiXvA42ECs7zMi8hgL8L1ChYNzqcWuIZV+CtdCyw60RUC64seuF1k8Q3SWLJ",
	"Ge1T817OyvIBc1LBLxrTyTqYFh9cJGIcAH+STL17bk4OAzo+dhqtxX1s9DTzP38L/HVD36PdQwVv6DFV",
	"xtYFQutGw3rMwGi3UHx8iQQKRZ8CALP6o8ZNFPlRIcevdbP/qtqfLTm9iOMYB3IC8+lTaQeQLs7O5vKV",
	"MlbX5BxuOhK/KJa8P8JqUtcRWmOWSFPc+zdqjAE6ig/PNNTP4b9AJeizdCxVu4xj1HvEcU6keW8zuCgv",
	"5qI/NItf9aCao4omEWb9X+T+G2KBy/kmLv1X1r+Q7Mvk/koADinP2Y8We2Ky/vecLdK/J9iJlZIfBxLX",
	"DSmWW0lW6K1AkbxKr+yflcPTmVbYYYWwHSh7Yf1pKa4zMMNCc+Kqe55ZUe9bT2havIsTutgjcZViv6CN",
	"/36MJ8Ufj7HXJHu33PVO19hNdlFVFGUevuqyvPRr5dimobvZ9kIjcx+wyb10buMYW7+pn7ar6wUzY3Xz",
	"DzZSgydOqvjYOOGRSBrgmEd4Rx2ho4OeTT/G9fh3AAAA//+k6PaJwgoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
