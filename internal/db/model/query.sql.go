// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos (
  uuid, title, description
) VALUES (
  $1, $2, $3
)
`

type CreateTodoParams struct {
	Uuid        uuid.UUID
	Title       string
	Description string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, arg.Uuid, arg.Title, arg.Description)
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE uuid = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, argUuid)
	return err
}

const getTodo = `-- name: GetTodo :one

SELECT uuid, title, description FROM todos
WHERE uuid = $1 LIMIT 1
`

// WATCHES
func (q *Queries) GetTodo(ctx context.Context, argUuid uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, argUuid)
	var i Todo
	err := row.Scan(&i.Uuid, &i.Title, &i.Description)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT uuid, title, description FROM todos
ORDER BY title
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.Uuid, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :execresult
UPDATE todos
SET title = $1,
description = $2
WHERE uuid = $3
`

type UpdateTodoParams struct {
	Title       string
	Description string
	Uuid        uuid.UUID
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTodo, arg.Title, arg.Description, arg.Uuid)
}
